
========== Movie Specific Page ===========

				TAG!!!!!
Selected_Movie:	IDX
				KorTitle	--
				ENGTitle	--
				ReleaseDate	--
				PLAYTIME	--
				Rating		--
				Outline		--
				price		--
				AVGSCORE	--
				SCORE_COUNT	--
				(Genre) <- MOVGENRE_MAP -> MOV_GENRE	--
				(Comments count) <- COMMENTS			--
				(wish count) <- WISH_LIST			XX
				
MOVGUYSMAPPING(MOV_IDX)	MOVGUYS_IDX			--
						(name) -> MOVGUYS	--
						ROLE				--
						CHARACTER			--

Selected_Accounts: 	_selected (id from Session)
					isPossed?(PossesedMovie + Subscription w/selected MV) 100				ACCOUNT.IDX <- POSSESION.ACCIDX - POSSESION.PRODUCTS_IDX <- PRODUCTS.IDX - MOV_IDX equals selected_mvID or
					isWishList (w/selected MV) 10
					isScored (w/selected MV) 1

Comments: (MOVIE_IDX)
			(+compare to logged id later)
			ACCOUNTS_IDX (only IDX from comments) COMMENTS_ACCIDX	--
			ACCOUNTS_NAME											--
			ACCOUNTS_SCORE											--
			REG_DATE												--
			CONTENTS												--

similar movie list:	(like using GENRE from Selected_Movie)
					title
					length
					rating
					overvies
					isWishList

MOVIE( KORTITLE varchar2(500), ENGTITLE varchar2(500), COUNTRY varchar2(100), RELEASEDATE date, RATING varchar2(50), PLAYTIME varchar2(50), VIEWCOUNT number(9), OUTLINE clob, TICKETSOLD number(8), PRICE number(7), TOT_SCORE binary_double, SCORE_COUNT number(9)
MOVGENRE_MAP
MOV_GENRE
COMMENTS
WISH_LIST

MOVGUYSMAPPING
MOVGUYS

ACCOUNT
MVSCORE

COMMENTS
	more accounts..

-----movie selecter (without wishlist) + MOVGUYS + COMMENT

select 
        case when M.IDX is not null then 'MOVIE' when MOVIEGUYS_IDX is not null then 'MOVIEGUYS' when ACCOUNT_IDX is not null then 'ACCOUNT_COMMENT' end as TAG
    , M.KORTITLE MOVIE_KORTITLE, M.IDX MOVIE_IDX, M.ENGTITLE MOVIE_ENGTITLE, M.RELEASEDATE MOVIE_RELEASEDATE, M.PLAYTIME MOVIE_PLAYTIME, M.RATING MOVIE_RATING,SCORE_COUNT MOVIE_SCORECOUNT, M.OUTLINE MOVIE_OUTLINE, M.PRICE MOVIE_PRICE, round(M.TOT_SCORE/M.SCORE_COUNT,2) MOVIE_AVGSCORE, M.SCORE_COUNT MOVIE_SCORECNT, J.GENRE MOVIE_GENRE, M.COMM_COUNT MOVIE_COMMENTCOUNT
	, MOVIEGUYS_IDX, MOVIEGUYS_NAME, MOVIEGUYS_ROLE, MOVIEGUYS_CHARACTER
	, COMMENT_IDX, ACCOUNT_IDX, COMMENT_REGDATE, COMMENT_CONTENTS, COMMENT_ISBLIND, ACCOUNT_EMAIL, ACCOUNT_NAME, SCORE ACCOUNT_SCORE
from MOVIE M
inner join (select MM.MOV_IDX MIDX, LISTAGG(MG.GENRE, ',')WITHIN GROUP (order by MOV_IDX)as GENRE from MOVGENRE_MAP MM inner join MOV_GENRE MG on MM.GENRE_IDX = MG.IDX 
    where MM.MOV_IDX = 1 group by MM.MOV_IDX)
    J on M.IDX = J.MIDX
    full outer join (select MGMP.MOVGUYS_IDX MOVIEGUYS_IDX, MGYS.NAME MOVIEGUYS_NAME ,MGMP.ROLE MOVIEGUYS_ROLE, MGMP.CHARACTER MOVIEGUYS_CHARACTER from MOVGUYS MGYS inner join (select MOVGUYS_IDX, ROLE,CHARACTER from MOVGUYS_MAPPING where MOV_IDX =1) MGMP on MGMP.MOVGUYS_IDX = MGYS.IDX) on 1=2
    full outer join (select A.COMMENT_IDX, A.ACCOUNT_IDX, A.COMMENT_REGDATE, A.COMMENT_CONTENTS, A.COMMENT_ISBLIND, B.ACCOUNT_EMAIL, B.ACCOUNT_NAME, SC.SCORE from (select CMT.IDX COMMENT_IDX, CMT.ACC_IDX ACCOUNT_IDX, CMT.REG_DATE COMMENT_REGDATE, CMT.CONTENTS COMMENT_CONTENTS, CMT.ISBLIND COMMENT_ISBLIND from (select IDX, ACC_IDX, MOVIE_IDX, REG_DATE, CONTENTS, ISBLIND from COMMENTS where MOVIE_IDX =1 order by REG_DATE) CMT where ROWNUM<=3) A inner join (select  ACC_IDX, MOVIE_IDX, SCORE from MVSCORE where MOVIE_IDX = 1) SC on A.ACCOUNT_IDX=SC.ACC_IDX
        inner join (select IDX ACCOUNT_IDX, EMAIL ACCOUNT_EMAIL ,NAME ACCOUNT_NAME from ACCOUNT where DEL_FLAG = 'N') B on A.ACCOUNT_IDX = B.ACCOUNT_IDX
    ) on 1=2
;


-------------mvCmtInit

select
    case 
        when ACC.IDX is not null then 'ACCOUNT' 
        when IDX is not null then 'MOVIE' 
        when CONTENTS is not null then 'ACCOUNT' 
    end as TAG
    , ACC.IDX ACCOUNT_IDX, NAME ACCOUNT_NAME, SCORE ACCOUNT_SCORE
    , IDX MOVIE_IDX, KORTITLE MOVIE_KORTITLE, ENGTITLE MOVIE_ENGTITLE
    , C.CONTENTS ACCOUNT_CONTENTS, C.IDX ACCOUNT_COMMIDX
from ACCOUNT ACC
inner join (select ACC_IDX, SCORE from MVSCORE where ACC_IDX = 1 and MOVIE_IDX = 1) MVS on ACC.IDX = MVS.ACC_IDX 
inner join (select CONTENTS, IDX, ACC_IDX from COMMENTS where ACC_IDX =1 and IDX = 63) C on ACC.IDX=C.ACC_IDX
full outer join (select IDX, KORTITLE, ENGTITLE from MOVIE where IDX = 1) on 1=2;
 
 
-- commenting plsql

declare	
    cnt number(1);
begin
    insert into COMMENTS (ACC_IDX, MOVIE_IDX, CONTENTS) values(1,1,to_clob('1111111111111111    test    111111111111111')); 
    select count(1)into cnt from MVSCORE where ACC_IDX =1 and MOVIE_IDX =1;
    if(cnt=0)
        then insert into MVSCORE(ACC_IDX,MOVIE_IDX,SCORE)values(1,1,5);
        else update MVSCORE set SCORE=5 where ACC_IDX=1 and MOVIE_IDX=1;
    end if;
end;
/


-- more comments query

select
    case when AC.IDX is not null then 'ACCOUNT' when M.IDX is not null then 'MOVIE' end as TAG
    , AC.IDX ACCOUNT_IDX, AC.NAME ACCOUNT_NAME, C.IDX ACCOUNT_COMMIDX, C.REG_DATE ACCOUNT_REGDATE, C.CONTENTS ACCOUNT_CONTENTS, C.ISBLIND ACCOUNT_ISBLIND, NUM ACCOUNT_COMMNUM
    , M.IDX MOVIE_IDX, M.ENGTITLE MOVIE_ENGTITLE, M.KORTITLE MOVIE_KORTITLE, M.COMM_COUNT MOVIE_COMMCOUNT
from ACCOUNT AC
inner join
    (select IDX, ACC_IDX, REG_DATE, CONTENTS, ISBLIND, rownum NUM from (select IDX, ACC_IDX, REG_DATE, CONTENTS, ISBLIND from COMMENTS where MOVIE_IDX=1 order by REG_DATE desc)) C on C.ACC_IDX=AC.IDX and NUM between 16 and 20
full outer join (select IDX, ENGTITLE, KORTITLE, COMM_COUNT from MOVIE where IDX = 1) M on 1=2;





--------------------------------------------------------------------

상품

포인트


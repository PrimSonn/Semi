
========== Movie Specific Page ===========

				TAG!!!!!
Selected_Movie:	IDX
				KorTitle	--
				ENGTitle	--
				ReleaseDate	--
				PLAYTIME	--
				Rating		--
				Outline		--
				price		--
				AVGSCORE	--
				SCORE_COUNT	--
				(Genre) <- MOVGENRE_MAP -> MOV_GENRE	--
				(Comments count) <- COMMENTS			--
				(wish count) <- WISH_LIST			XX
				
MOVGUYSMAPPING(MOV_IDX)	MOVGUYS_IDX			--
						(name) -> MOVGUYS	--
						ROLE				--
						CHARACTER			--

Selected_Accounts: 	_selected (id from Session)
					isPossed?(PossesedMovie + Subscription w/selected MV) 100				ACCOUNT.IDX <- POSSESION.ACCIDX - POSSESION.PRODUCTS_IDX <- PRODUCTS.IDX - MOV_IDX equals selected_mvID or
					isWishList (w/selected MV) 10
					isScored (w/selected MV) 1

Comments: (MOVIE_IDX)
			(+compare to logged id later)
			ACCOUNTS_IDX (only IDX from comments) COMMENTS_ACCIDX	--
			ACCOUNTS_NAME											--
			ACCOUNTS_SCORE											--
			REG_DATE												--
			CONTENTS												--

similar movie list:	(like using GENRE from Selected_Movie)
					title
					length
					rating
					overvies
					isWishList

MOVIE( KORTITLE varchar2(500), ENGTITLE varchar2(500), COUNTRY varchar2(100), RELEASEDATE date, RATING varchar2(50), PLAYTIME varchar2(50), VIEWCOUNT number(9), OUTLINE clob, TICKETSOLD number(8), PRICE number(7), TOT_SCORE binary_double, SCORE_COUNT number(9)
MOVGENRE_MAP
MOV_GENRE
COMMENTS
WISH_LIST

MOVGUYSMAPPING
MOVGUYS

ACCOUNT
MVSCORE

COMMENTS
	more accounts..

-----movie selecter (without wishlist) + MOVGUYS + COMMENT
select 
        case when M.IDX is not null then 'MOVIE' when MOVIEGUYS_IDX is not null then 'MOVIEGUYS' when ACCOUNT_IDX is not null then 'ACCOUNT_COMMENT' end as TAG
    , M.KORTITLE MOVIE_KORTITLE, M.IDX MOVIE_IDX, M.ENGTITLE MOVIE_ENGTITLE, M.RELEASEDATE MOVIE_RELEASEDATE, M.PLAYTIME MOVIE_PLAYTIME, M.RATING MOVIE_RATING,SCORE_COUNT MOVIE_SCORECOUNT, M.OUTLINE MOVIE_OUTLINE, M.PRICE MOVIE_PRICE, M.TOT_SCORE/M.SCORE_COUNT MOVIE_AVGSCORE, M.SCORE_COUNT MOVIE_SCORECNT, J.GENRE MOVIE_GENRE, C.C_COUNT MOVIE_COMMENTCOUNT, MOVIEGUYS_IDX, MOVIEGUYS_NAME, MOVIEGUYS_ROLE, MOVIEGUYS_CHARACTER, COMMENT_IDX, ACCOUNT_IDX, COMMENT_REGDATE, COMMENT_CONTENTS, COMMENT_ISBLIND, ACCOUNT_EMAIL, ACCOUNT_PW, ACCOUNT_NAME
from MOVIE M inner join (select MOVIE_IDX, count(MOVIE_IDX) as C_COUNT from COMMENTS group by MOVIE_IDX
    having MOVIE_IDX =1)
    C on M.IDX = C.MOVIE_IDX
inner join (select MM.MOV_IDX MIDX, LISTAGG(MG.GENRE, ',')WITHIN GROUP (order by MOV_IDX)as GENRE from MOVGENRE_MAP MM inner join MOV_GENRE MG on MM.GENRE_IDX = MG.IDX 
    where MM.MOV_IDX = 1 group by MM.MOV_IDX)
    J on M.IDX = J.MIDX
    full outer join (select MGMP.MOVGUYS_IDX MOVIEGUYS_IDX, MGYS.NAME MOVIEGUYS_NAME ,MGMP.ROLE MOVIEGUYS_ROLE, MGMP.CHARACTER MOVIEGUYS_CHARACTER from MOVGUYS MGYS inner join (select MOVGUYS_IDX, ROLE,CHARACTER from MOVGUYS_MAPPING where MOV_IDX =1) MGMP on MGMP.MOVGUYS_IDX = MGYS.IDX) on 1=2
    full outer join (select A.COMMENT_IDX, A.ACCOUNT_IDX, A.COMMENT_REGDATE, A.COMMENT_CONTENTS, A.COMMENT_ISBLIND, B.ACCOUNT_EMAIL, B.ACCOUNT_PW, B.ACCOUNT_NAME from (select CMT.IDX COMMENT_IDX, CMT.ACC_IDX ACCOUNT_IDX, CMT.REG_DATE COMMENT_REGDATE, CMT.CONTENTS COMMENT_CONTENTS, CMT.ISBLIND COMMENT_ISBLIND from (select * from COMMENTS where MOVIE_IDX =1 order by REG_DATE) CMT where ROWNUM<=3) A inner join (select IDX ACCOUNT_IDX, EMAIL ACCOUNT_EMAIL , PW ACCOUNT_PW, NAME ACCOUNT_NAME from ACCOUNT where DEL_FLAG = 'N') B on A.ACCOUNT_IDX = B.ACCOUNT_IDX) on 1=2
;


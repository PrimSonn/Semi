<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board.dao.BoardDao">
	<select id="selectAll" resultType="board.dto.Board">
		select BOARDNO, TITLE, WRITER, HIT, RECOMMEND, WRITTENDATE from BOARD order by BOARDNO
	</select>
	<select id="getTotal" resultType="int">
		select count(*) from BOARD
	</select>
	<select id="getPagingList" parameterType="board.util.Paging" resultType="board.dto.Board">
		select * from (
			select B.*, ROWNUM R from (
				select BOARDNO, TITLE, WRITER, HIT, RECOMMEND, WRITTENDATE from BOARD
				order by BOARDNO desc
			) B
			order by R
		) T
		where T.R between ${startNo} and ${endNo}
	</select>
	<select id="getSearchTotal" parameterType="board.dto.Board" resultType="int">
		select count(*) from BOARD where TITLE like '%${title}%'
	</select>
	<select id="searchTitle" parameterType="board.dto.Board" resultType="board.dto.Board" >
	
		select * from (
			select B.*, ROWNUM R from (
				select BOARDNO, TITLE, WRITER, HIT, RECOMMEND, WRITTENDATE from BOARD
				where TITLE like '%${title}%'
				order by BOARDNO desc
			) B
			order by R
		) T
		where T.R between ${startNo} and ${endNo}
	</select>
	<insert id="write" parameterType="board.dto.Board">
		insert all 
		into BOARD (BOARDNO, TITLE, WRITER, CONTENT, HIT, RECOMMEND,WRITERID)
			values (board_seq.nextval, #{title}, #{writer}, #{content}, 0, 0,#{writerId})
		  <if test="#{upFile} != null">
			into UPLOADFILE (fileNo, ORIGINAL_FILENAME, STORED_FILENAME, FILE_SIZE, BOARDNO)
			values (
				seq_uploadfile.nextval
				, #{upFile.original_filename }
				, #{upFile.stored_filename }
				, #{upFile.file_size }
				, board_seq.currval
			)
			</if>
		select 1 from DUAL
	</insert>
	<select id="viewContent" parameterType="board.dto.Board" resultType="board.dto.Board">
		select * from BOARD where BOARDNO = #{boardNo}
	</select>
	<update id="hitUp" parameterType="board.dto.Board">
		update BOARD set HIT = HIT+1 where BOARDNO = #{boardNo}
	</update>
	<delete id="delete" parameterType="board.dto.Board">
		delete from BOARD where BOARDNO=#{boardNo}
	</delete>
	<update id="edit" parameterType="board.dto.Board">
		update BOARD set TITLE = #{title}, CONTENT=#{content} where BOARDNO = ${boardNo}
	</update>
	<select id='recommendCheck' parameterType="board.dto.Board" resultType="board.dto.Board" >
		select USERID as writerId from RECOMMEND where BOARDNO=${boardNo} and USERID=#{writerId}
	</select>
	<insert id='doRecommend' parameterType="board.dto.Board">
		insert into RECOMMEND (BOARDNO, USERID) values (${boardNo}, #{writerId})
	</insert>
	<update id='upRecommendCount' parameterType="board.dto.Board">
		update BOARD set RECOMMEND = RECOMMEND +1 where BOARDNO = ${boardNo}
	</update>
	<update id='downRecommendCount' parameterType="board.dto.Board">
		update BOARD set RECOMMEND = RECOMMEND -1 where BOARDNO = ${boardNo}	
	</update>
	<delete id='undoRecommend' parameterType="board.dto.Board">
		delete from RECOMMEND where USERID = #{writerId} and BOARDNO = ${boardNo}
	</delete>
	<insert id="writeComment" parameterType="board.dto.Comment">
		insert into COMMENTTB (BOARDNO, USERID, PW, CONTENT, NICK) values (${boardNo}, #{userId}, #{pw}, #{content}, #{nick} )
	</insert>
	<select id="listComment" parameterType="board.util.Paging" resultType="board.dto.Comment">
		select * from (
			select B.*, ROWNUM R from (
				select NICK, CONTENT, WRITTENDATE, USERID, COMMENTNO from COMMENTTB
				order by COMMENTNO desc
			) B
			order by R
		) T
		where T.R between ${startNo} and ${endNo}
	</select>
	<select id='checkComment' parameterType="board.dto.Comment" resultType="int">
		select count(*) from COMMENTTB where USERID = #{userId} and COMMENTNO = ${commentNo}
	</select>
	<select id='totalComment' parameterType="int" resultType="int">
		select count(*) from COMMENTTB where BOARDNO = #{boardNo}
	</select>
	<delete id='deleteComment' parameterType="board.dto.Comment">
		delete from COMMENTTB where COMMENTNO = ${commentNo} and USERID = #{userId}
	</delete>
	<delete id='deleteBoardList' parameterType="board.dto.Board">
		delete from BOARD where BOARDNO in (${content})
	</delete>
</mapper>